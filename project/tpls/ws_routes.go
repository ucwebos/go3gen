package tpls

const WsRouteTpl = `// Code generated by go3gen. DO NOT EDIT.
package route

import (
	"context"
	"time"
	"strings"

	"github.com/topfreegames/pitaya/v2"
	"github.com/topfreegames/pitaya/v2/component"
	"go.opentelemetry.io/otel/attribute"

	"{{.Project}}/common"
	"{{.Project}}/common/core/log"
	"{{.Project}}/common/core/otel/prometheus"
	"{{.Project}}/common/core/otel/tracing"


	"{{.AppPkgPath}}/cmd/{{.EntryName}}/handler"
	"{{.AppPkgPath}}/cmd/{{.EntryName}}/middleware"
	"{{.AppPkgPath}}/cmd/{{.EntryName}}/types"
)

{{- range $x := .Groups}}
// ----------------------------------- {{.GroupName}} -----------------------------------
type {{$x.GroupUFirst}} struct {
	component.Base
	app pitaya.Pitaya
}

{{- range $it := .FunList}}
	// {{.FunMark}}
	func (m *{{$x.GroupUFirst}}) {{$it.Method}}(ctx context.Context, req *types.{{$it.ReqName}}) (*types.{{$it.RespName}}, error) {
		var (
			st = time.Now()
			resp = &types.{{$it.RespName}}{}
			err error
		)
		ctx, span := tracing.StartSpan(ctx, "socket:{{$it.URI}}")
		defer func() {
			span.End()
			prometheus.HistogramVec.Timing("ws_seconds", map[string]string{
				"entry": "{{$.EntryName}}",
				"route":   "{{$it.URI}}",
				"ret":   prometheus.RetLabel(err),
			}, st)
			_resp, _ := tools.JSON.Marshal(resp)
			_req,_ := tools.JSON.Marshal(req)
			log.With().TraceID(ctx).Field("uri", "{{$it.URI}}").Field("req", _req).Field("resp", _resp).Field("err", err).Info("on-http")
		}()
		resp, err = handler.{{$it.FunName}}(ctx, req)
		return resp, err
	}
{{- end}}
{{- end}}

func wsGenerated(app pitaya.Pitaya) {
{{- range .Groups}}
	app.Register(
		&{{.GroupUFirst}}{app: app}, component.WithName("{{.Group}}"), component.WithNameFunc(strings.ToLower),
	)
{{- end}}
}
`
