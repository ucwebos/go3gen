package tpls

import (
	"bytes"
	"text/template"
)

const GITpl = `// Code generated by go3gen. DO NOT EDIT.
package {{.Pkg}}

var (
	once sync.Once
	{{- range .List}}
		{{- if ne .NewReturnsLen 0}}
			_{{.NameVal}}Instance *{{.Name}}
		{{- else}}
			_{{.NameVal}}Instance *{{.Name}}
		{{- end}}
	{{- end}}
)

{{- range .List}}
func {{.Name}}Instance() *{{.Name}} {
	once.Do(func() {
	  	{{- if ne .NewReturnsLen 0}}
			_{{.NameVal}}Instance = New{{.Name}}()
		{{- else}}
			_{{.NameVal}}Instance = &{{.Name}}{}
		{{- end}}
	 })
	return _{{.NameVal}}Instance
}
{{- end}}
`

type GI struct {
	Pkg  string // 包名
	List []GItem
}

type GItem struct {
	Name          string // 结构体名称
	Type          string // 对象类型
	NameVal       string // 对象名称
	NewReturnsLen int    // 对象初始化方法返回
}

func (d *GI) Execute() ([]byte, error) {
	buf := new(bytes.Buffer)
	tmpl, err := template.New("GI").Parse(GITpl)
	if err != nil {
		return nil, err
	}
	if err := tmpl.Execute(buf, d); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
